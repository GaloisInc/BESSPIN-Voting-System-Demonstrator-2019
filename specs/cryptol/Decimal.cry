module Decimal where

toBase : {digits, bits, base, d}
  (fin base, fin bits, fin digits, base >= 2, base^^digits >= 2^^bits) =>
  [base]d -> [bits] -> [digits]d
toBase alphabet number = toBase'`{max (width base) bits} (zero # number)
  where
    toBase' : {x} (fin x, base >= 1, x >= width base) => [x] -> [digits]d
    toBase' n =
      if n == zero
      then repeat (head alphabet)
      else updateEnd (toBase' (n / `base) <<< 1)
                     (zero : [0])
                     (alphabet @ (n % `base))

fromBase : {digits, bits, base, d}
  (fin base, fin bits, fin digits, fin d,
   base >= 2, bits >= width base, 2^^bits >= base^^digits) =>
  [base][d] -> [digits][d] -> [bits]
fromBase alphabet digits =
  sum (zipWith (*) (values @@ digits) (reverse exponents))
  where
    values : [2^^d][bits]
    values = updates (repeat (error "fromBase: invalid digit")) alphabet [0..base-1]

    exponents : [digits][bits]
    exponents = map (\e -> `base^^e) (take (iterate (\i -> i + 1) 0))

// Common bases

binary      = take`{2}  hexadecimal
ternary     = take`{3}  hexadecimal
quaternary  = take`{4}  hexadecimal
quintary    = take`{5}  hexadecimal
pentary     = quintary
senary      = take`{6}  hexadecimal
heptary     = take`{7}  hexadecimal
septary     = heptary
octal       = take`{8}  hexadecimal
nonary      = take`{9}  hexadecimal
decimal     = take`{10} hexadecimal
duodecimal  = take`{12} hexadecimal
hexadecimal = ['0'..'9'] # ['A'..'F']
