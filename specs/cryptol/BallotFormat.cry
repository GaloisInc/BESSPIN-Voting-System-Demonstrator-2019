// A number of _contests_ where a unique _option_ among the
// options specified by the _contest options_ is selected for each
// contest.

// @author Giuliano Losa <giuliano@galois.com>
// @author Joe Kiniry <kiniry@freeandfair.us>

// We have a number `nct` of contests `(0,1,...,nct-1)` with a maximum
// of `max_nopt` options `(0,1,...,max_nopt-1)` per contest. A vector
// `co` of `nct` elements, each in between `1` and `max_nopt`, specifies
// the contest options for each contest.
// Given contest `ct`, a selection for option `i` where `0 <= i <
// co@ct` is represented as a bitvector of size `max_nopt` consisting
// exclusively of zeros except for the bit at position `i`.  A ballot is
// a vector of size `nct` where each entry is a bitvector of length
// `max_nopt`. Note that a contest must have at least one contest option.

// This is a vector describing the number of options in each contest,
// where `max_nopt` is the maximum number of options that any contest
// may have. `0` is not a valid number of contest options.
type contest_options nct max_nopt = [nct][width max_nopt]

type ballot nct max_nopt = [nct][max_nopt] // one bit per option

type constraint ballot_constraint nct max_nopt =
  (fin nct, fin max_nopt, nct >= 1, max_nopt >= 1)

// A ballot is valid if and only if there is exactly one choice per
// contest and, if `ct` is a contest, then no bit is set in `ct`'s entry
// beyond and including the bit at position `co@ct`.
is_valid : {nct, max_nopt} ballot_constraint nct max_nopt =>
  contest_options nct max_nopt -> ballot nct max_nopt -> Bit
is_valid co b = all is_valid b'
  where 
    b' = zip b [0..(nct-1)]
    is_valid x = ex_unique (c && m) /\ ((c && ~m) == zero)
      where 
        c = x.0
        m = mask ct 
        ct = x.1
    ex_unique x = x != zero /\ x && (x-1) == 0 // exactly one bit is set
    // mask to get rid of unused least-significant bits:
    mask ct = [if i < co@ct then True else False | i <- [0..(max_nopt-1)]]

// Given a valid ballot, `selection b ct == opt` if and only if
// option `opt` is selected in contest `ct`.
selection : {nct, nopt} ballot_constraint nct nopt =>
  ballot nct nopt -> [width (nct-1)] -> [width (nopt-1)]
selection b ct = (last xs).1
  where xs = [(False, 0)] # [
    if stop then (stop,opt) else (if (b@ct@i) then (True, i) else (False,0))
    | i <- [0..nopt-1]
    | (stop,opt) <- xs ]

// example: there are 2 contests; contest 0 has two contest options and
// contest 1 has 4 contest options (thus `max_nopt==4` and 
// `width max_nopt==3`)
(my_co:[2][3]) = [2,4]
test_1 : Bit
property test_1 = is_valid my_co [0b1000, 0b0100]
test_selection_1 : Bit
// option 1 is selected in contest 0:
property test_selection_1 = selection [0b0100, 0b0100] 0 == 1
test_selection_2 : Bit
// option 2 is selected in contest 1:
property test_selection_2 = selection [0b0100, 0b0010] 1 == 2
test_2 : Bit
property test_2 = ~(is_valid my_co [0b0010, 0b0100])
test_3 : Bit
property test_3 = ~(is_valid my_co [0b0000, 0b0100])
test_4 : Bit
property test_4 = ~(is_valid my_co [0b1000, 0b0101])
test_5 : Bit
property test_5 = ~(is_valid my_co [0b1000, 0b1111])
