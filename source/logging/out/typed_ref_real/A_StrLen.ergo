(* ---------------------------------------------------------- *)
(* --- Axiomatic 'StrLen'                                 --- *)
(* ---------------------------------------------------------- *)

logic L_strlen : (addr,int) farray,addr -> int

axiom Q_strlen_pos_or_null:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i : int.
  (Mchar_0[shift_sint8(s, i)] = 0) -> (0 <= i) ->
    (forall i_1 : int. (0 <= i_1) -> (i_1 < i) ->
     (Mchar_0[shift_sint8(s, i_1)] <> 0)) -> (L_strlen(Mchar_0, s) = i)

axiom Q_strlen_neg:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  (forall i : int. (0 <= i) -> (Mchar_0[shift_sint8(s, i)] <> 0)) ->
    (L_strlen(Mchar_0, s) < 0)

axiom Q_strlen_before_null:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i : int.
  (0 <= i) -> (i < L_strlen(Mchar_0, s)) -> (Mchar_0[shift_sint8(s, i)] <> 0)

axiom Q_strlen_at_null:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  (0 <= L_strlen(Mchar_0, s)) ->
    (Mchar_0[shift_sint8(s, L_strlen(Mchar_0, s))] = 0)

axiom Q_strlen_not_zero:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i : int.
  (Mchar_0[shift_sint8(s, i)] <> 0) -> (0 <= i) ->
    (i <= L_strlen(Mchar_0, s)) -> (i < L_strlen(Mchar_0, s))

axiom Q_strlen_zero:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i : int.
  (Mchar_0[shift_sint8(s, i)] = 0) -> (0 <= i) ->
    (i <= L_strlen(Mchar_0, s)) -> (L_strlen(Mchar_0, s) = i)

axiom Q_strlen_sup:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i : int.
  (Mchar_0[shift_sint8(s, i)] = 0) -> (0 <= i) ->
    ((L_strlen(Mchar_0, s) <= i) and (0 <= L_strlen(Mchar_0, s)))

axiom Q_strlen_shift:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i : int.
  (0 <= i) -> (i <= L_strlen(Mchar_0, s)) ->
    ((i + L_strlen(Mchar_0, shift_sint8(s, i))) = L_strlen(Mchar_0, s))

axiom Q_strlen_create:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i : int.
  (Mchar_0[shift_sint8(s, i)] = 0) -> (0 <= i) ->
    ((L_strlen(Mchar_0, s) <= i) and (0 <= L_strlen(Mchar_0, s)))

axiom Q_strlen_create_shift:
  forall s : addr.
  forall Mchar_0 : (addr,int) farray.
  forall i,k : int.
  (Mchar_0[shift_sint8(s, i)] = 0) -> (k <= i) -> (0 <= k) ->
    ((0 <= L_strlen(Mchar_0, shift_sint8(s, k))) and
     ((k + L_strlen(Mchar_0, shift_sint8(s, k))) <= i))

axiom Q_memcmp_strlen_left:
  forall s1_0,s2_0 : addr.
  forall Mchar_0 : (addr,int) farray.
  forall n : int.
  (L_memcmp(Mchar_0, Mchar_0, s1_0, s2_0, n) = 0) ->
    (L_strlen(Mchar_0, s1_0) < n) ->
    (L_strlen(Mchar_0, s2_0) = L_strlen(Mchar_0, s1_0))

axiom Q_memcmp_strlen_right:
  forall s1_0,s2_0 : addr.
  forall Mchar_0 : (addr,int) farray.
  forall n : int.
  (L_memcmp(Mchar_0, Mchar_0, s1_0, s2_0, n) = 0) ->
    (L_strlen(Mchar_0, s2_0) < n) ->
    (L_strlen(Mchar_0, s2_0) = L_strlen(Mchar_0, s1_0))

axiom Q_memcmp_strlen_shift_left:
  forall s1_0,s2_0 : addr.
  forall Mchar_0 : (addr,int) farray.
  forall k,n : int.
  (L_memcmp(Mchar_0, Mchar_0, s1_0, shift_sint8(s2_0, k), n) = 0) ->
    (0 <= k) -> (L_strlen(Mchar_0, s1_0) < n) ->
    ((0 <= L_strlen(Mchar_0, s2_0)) and
     (L_strlen(Mchar_0, s2_0) <= (k + L_strlen(Mchar_0, s1_0))))

axiom Q_memcmp_strlen_shift_right:
  forall s1_0,s2_0 : addr.
  forall Mchar_0 : (addr,int) farray.
  forall k,n : int.
  (L_memcmp(Mchar_0, Mchar_0, shift_sint8(s1_0, k), s2_0, n) = 0) ->
    (0 <= k) -> (L_strlen(Mchar_0, s2_0) < n) ->
    ((0 <= L_strlen(Mchar_0, s1_0)) and
     (L_strlen(Mchar_0, s1_0) <= (k + L_strlen(Mchar_0, s2_0))))

