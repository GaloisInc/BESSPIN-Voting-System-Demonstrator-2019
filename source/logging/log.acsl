/**
 * Smart Ballot Box ACSL specification
 * @refine log.lando
 */

#ifndef __LOG_API_ACSL__
#define __LOG_API_ACSL__

#include "log_t.h"
#include "hsm.h"

// @spec kiniry An algebraic specification of logs should be added
// here, much like we have in `sbb.acsl`, complementing that which is
// found in `secure_log.acsl`.  This specification should be type
// isomorphic to, and behaviorally equivalent to, that which is
// specified by Joey in the Cryptol spec of secure logging.

/*@ axiomatic polymorphic_list {
  @ type list<A> = Nil | Cons(A,list<A>);
  @}
  @
  @ //binding C type log_entry
  @ axiomatic log_entry_type {
  @ type Log_entry = log_entry;
  @}
  @
  @
  @ axiomatic log_log_entry {
  @ type Log=list<Log_entry>;
  @ logic Log cons(Log_entry the_entry, Log log_list);
  @ logic Log append(Log log_list1,Log log_list2);
  @
  @ axiom append_Nil:
  @ \forall Log log_list, nil; append(nil,log_list) == log_list;
  @
  @ axiom append_Cons:
  @ \forall  Log_entry the_entry, Log log_list1,log_list2;
  @ append(cons(the_entry,log_list1),log_list2) == cons(the_entry,append(log_list1,log_list2));
  @}
  @ 
  @ //binding C type sha256_digest
  @ axiomatic sha_256_digest_type {
  @ type Sha256_digest = sha256_digest;
  @}
  @ 
  @ //cannot bind struct in C
  @ axiomatic secure_log_entry_type {
  @ type Secure_log_entry =  Struct(Log_entry, Sha256_digest);
  @
  @ logic Log_entry sle_the_entry(Secure_log_entry sle);
  @
  @ logic Sha256_digest sle_the_digest(Secure_log_entry sle);
  @
  @ axiom sle_the_entry_def: 
  @ \forall Log_entry le, Sha256_digest sd; sle_the_entry(Struct(le,sd)) == le;
  @
  @ axiom sle_the_digest_def: 
  @ \forall Log_entry le, Sha256_digest sd; sle_the_digest(Struct(le,sd)) == sd;
  @
  @
  @ logic uint8_t total_sizeOf(Log_entry le, Sha256_digest sd)=
  @   \let sle_the_entry = (uint8_t)sizeof(le); 
  @   \let sle_the_digest = (uint8_t)sizeof(sd);
  @     (uint8_t)(sle_the_entry + sle_the_digest);
  @
  @ logic uint8_t sizeOf(Secure_log_entry sle)= 
  @   \let sle_the_entry = sle_the_entry(sle);
  @   \let sle_the_digest = sle_the_digest(sle);
  @     total_sizeOf(sle_the_entry, sle_the_digest);
  @       
  @}
  @ 
  @
  @ axiomatic secure_log_type {
  @ type Secure_log = list<Secure_log_entry>;
  @}
  @*/

#endif
