/**
 * Smart Ballot Box ACSL specification
 * @refine log.lando
 */

#ifndef __LOG_API_ACSL__
#define __LOG_API_ACSL__

#include "log_t.h"

// @spec kiniry An algebraic specification of logs should be added
// here, much like we have in `sbb.acsl`, complementing that which is
// found in `secure_log.acsl`.  This specification should be type
// isomorphic to, and behaviorally equivalent to, that which is
// specified by Joey in the Cryptol spec of secure logging.

/*@ axiomatic log {
  @ type list<A> = Nil | Cons(A,list<A>);
  @ type Log=list<log_entry>;
  @ logic log_entry l_entry;
  @ logic Log log_list;
  @ logic Log nil;
  @ logic Log cons(log_entry l_entry, Log log_list);
  @ logic Log append(Log log_list1,Log log_list2);
  @
  @ axiom append_Nil:
  @ \forall Log log_list; append(nil,log_list) == log_list;
  @
  @ axiom append_Cons:
  @ \forall  log_entry l_entry, Log log_list1,log_list2;
  @ append(cons(l_entry,log_list1),log_list2) == cons(l_entry,append(log_list1,log_list2));
  @
  @
  @ predicate valid_log_entry(log_entry *l_entry) =
  @  \valid_read(l_entry) &&
  @  \valid_read(((char*)l_entry)+(0 .. LOG_ENTRY_LENGTH -1));
  @}
  @*/


#endif
