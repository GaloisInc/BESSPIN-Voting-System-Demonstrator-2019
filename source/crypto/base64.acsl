/**
 * SBB Crypto ACSL specification
 * @refine crypto.lando
 */

#ifndef __BASE64_API_ACSL__
#define __BASE64_API_ACSL__

#include "padding.acsl"

/*@ axiomatic base64_maps {
  @ type bit = Bit | Zero; // Bit can be true or false and zero is another constructor 
  @ type bits = \list<bit>;
  @ type sextet_list = \list<bits>;
  @ logic bits octet(model_byte mb);
  @ type char62 = model_byte;       
  @ type char63 = model_byte;       
  @ type padChar = model_byte;
  @ type base64 = model_data;       
  @ type Base64_n = model_data;
  @
  @ axiom octet_size: \forall model_byte mb; \length(octet(mb)) == 8;
  @
  @ logic integer Base64Length_n (integer n) = \ceil(\ceil(4 * ((8 * n) / 6)) / 4);
  @
  @ // bytes to bits
  @ logic bits join_bits(model_data d, integer n) = 
  @     (d != [| |] &&  n < 0 && n <= \length(d))? 
  @     octet(\nth(d, n - 1)) ^ join_bits(d, n + 1) :[| |];
  @
  @ // padding with zero bits
  @ logic bits padWith_bits(integer mod, integer n, model_data d) = 
  @       (mod * \ceil(n / mod)  == n && mod >= 1) ? join_bits(d, \length(d)):
  @       join_bits(d, n) ^ \repeat( [| Zero |] , mod * \ceil(n / mod) - n);
  @
  @ // select tuple of 6 bits
  @ logic \list<bit> unfold_six_bits(\list<bit> d, integer n) = 
  @       (d != [| |] && 0 < n && n <= \length(d) && n % 7 != 0)? 
  @       [| Bit |] ^ unfold_six_bits(d, n + 1): [| |];
  @ 
  @ // select rest of the bits excluding first six bits
  @ logic \list<bit> unfold_GT_six_bits( \list<bit> d, integer n) = 
  @       (d != [| |] && 0 < n && n <= \length(d))?
  @       [| Bit |] ^ unfold_GT_six_bits(d, n + 1) : [| |];
  @
  @ // create sextets n should start at 1 
  @ logic \list< \list<bit> > sextets (\list<bit> b, integer n) = 
  @       (\length(b) <= 6)? [| b |] : [| unfold_six_bits(b, n) |] ^ sextets(unfold_GT_six_bits(b, 7), n);
  @
  @ axiom base64_def: \forall base64 b, char62 ch1, char63 ch2; \length(b) == 64 &&  // base64 map
  @  \nth(b,62) == ch1 && \nth(b,63) == ch2;
  @
  @ axiom Base64_n_def: \forall Base64_n b, integer n; n > 0 && \length(b) == Base64Length_n(n);
  @ 
  @ }
  @ lemma test_join_bits: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @      \length(join_bits(l, 4)) == 32;
  @
  @ lemma test_Base64Length_n: Base64Length_n(3) == 4;
  @
  @*/
#endif