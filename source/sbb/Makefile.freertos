DEFAULT_PROG = default_ballot_box
BOX1_PROG = ballot_box_1
BOX2_PROG = ballot_box_2
BOX3_PROG = ballot_box_3
BOX4_PROG = ballot_box_4
LOGGING_DIR = ../logging
CRYPTO_DIR = ../crypto
PROTOCOLS_DIR = ../protocols

DEMO_SRC = \
    main_freertos.c \
    sbb_tcp.c \
    sbb.c \
    sbb_strings.c \
    sbb_logging.c \
    sbb_crypto.c \
    sbb_machine.c \
    ../logging/log.c \
    ../logging/secure_log.c \
    ../logging/system_log.c \
    ../logging/application_log.c \
    ../logging/log_io.c \
    ../logging/log_fs.c \
    ../logging/log_net.c \
    ../logging/debug_io.c \
    ../crypto/base64.c \
    ../crypto/crypto.c \
    ../crypto/sha2-openbsd.c \
    ../crypto/aes.c \
    ../crypto/cbc.c \
    ../crypto/mode_wrappers.c \
    ../protocols/Common/FreeRTOS_TCP_server.c \
    ../protocols/HTTP/FreeRTOS_HTTP_server.c \
    ../protocols/HTTP/FreeRTOS_HTTP_commands.c \
    ../protocols/HTTP/peekpoke.c

DEFAULT_SRC = \
    sbb_config_default.c \
    ../crypto/crypto_config_default.c

# there is almost certainly a better way of doing this, but
# this will work for now
#
# note that the "sbb_config_box*" files contain both crypto and
# TCP/naming configurations; the crypto default configuration in
# the crypto directory exists solely to allow crypto tests to be
# run on their own

BOX1_SRC = sbb_config_box1.c 
BOX2_SRC = sbb_config_box2.c
BOX3_SRC = sbb_config_box3.c
BOX4_SRC = sbb_config_box4.c

CFLAGS += -I$(LOGGING_DIR) -I$(CRYPTO_DIR) -DconfigUSE_DHCP \
          -DHARDCODE_CURRENT_TIME \
          -DCURRENT_YEAR=2019 \
          -DCURRENT_MONTH=7 \
          -DCURRENT_DAY=22 \
          -DCURRENT_HOUR=13 \
          -DCURRENT_MINUTE=18

#
# Define all object files.
#
RTOS_OBJ = $(FREERTOS_SRC:.c=.o)
RTOS_TCP_OBJ = $(FREERTOS_TCP_SRC:.c=.o)
APP_OBJ  = $(APP_SRC:.c=.o)
PORT_OBJ = $(PORT_SRC:.c=.o)
DEMO_OBJ = $(DEMO_SRC:.c=.o)
PORT_ASM_OBJ = $(PORT_ASM:.S=.o)
CRT0_OBJ = $(CRT0:.S=.o)
OBJS = $(CRT0_OBJ) $(PORT_ASM_OBJ) $(PORT_OBJ) $(RTOS_OBJ) $(RTOS_TCP_OBJ) $(DEMO_OBJ) $(APP_OBJ)
OBJS_DEFAULT = $(OBJS) $(DEFAULT_SRC:.c=.o)
OBJS_BOX1 = $(OBJS) $(BOX1_SRC:.c=.o)
OBJS_BOX2 = $(OBJS) $(BOX2_SRC:.c=.o)
OBJS_BOX3 = $(OBJS) $(BOX3_SRC:.c=.o)
OBJS_BOX4 = $(OBJS) $(BOX4_SRC:.c=.o)

$(info ASFLAGS=$(ASFLAGS))
$(info LDLIBS=$(LDLIBS))
$(info CFLAGS=$(CFLAGS))
$(info LDFLAGS=$(LDFLAGS))
$(info ARFLAGS=$(ARFLAGS))

%.o: %.c
	@echo "    CC $<"
	@$(GCC) -c $(CFLAGS) -o $@ $<

%.o: %.S
	@echo "    CC $<"
	@$(GCC) $(ASFLAGS) -c $(CFLAGS) -o $@ $<

all: $(DEFAULT_PROG).elf $(BOX1_PROG).elf $(BOX2_PROG).elf $(BOX3_PROG).elf $(BOX4_PROG).elf

$(DEFAULT_PROG).elf  : $(OBJS_DEFAULT)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_DEFAULT) $(LIBS)
	@$(OBJDUMP) -S $(DEFAULT_PROG).elf > $(DEFAULT_PROG).asm
	@echo Completed $@

$(BOX1_PROG).elf  : $(OBJS_BOX1)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX1) $(LIBS)
	@$(OBJDUMP) -S $(BOX1_PROG).elf > $(BOX1_PROG).asm
	@echo Completed $@
	
$(BOX2_PROG).elf  : $(OBJS_BOX2)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX2) $(LIBS)
	@$(OBJDUMP) -S $(BOX2_PROG).elf > $(BOX2_PROG).asm
	@echo Completed $@
	
$(BOX3_PROG).elf  : $(OBJS_BOX3)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX3) $(LIBS)
	@$(OBJDUMP) -S $(BOX3_PROG).elf > $(BOX3_PROG).asm
	@echo Completed $@
	
$(BOX4_PROG).elf  : $(OBJS_BOX4)
	@echo Linking....
	@$(GCC) -o $@ $(LDFLAGS) $(OBJS_BOX4) $(LIBS)
	@$(OBJDUMP) -S $(BOX4_PROG).elf > $(BOX4_PROG).asm
	@echo Completed $@
	
clean :
	@rm -f $(OBJS_DEFAULT) $(OBJS_BOX1) $(OBJS_BOX2) $(OBJS_BOX3) $(OBJS_BOX4)
	@rm -f $(DEFAULT_PROG).elf $(BOX1_PROG).elf $(BOX2_PROG).elf $(BOX3_PROG).elf $(BOX4_PROG).elf
	@rm -f $(DEFAULT_PROG).map $(BOX1_PROG).map $(BOX2_PROG).map $(BOX3_PROG).map $(BOX4_PROG).map
	@rm -f $(DEFAULT_PROG).asm $(BOX1_PROG).asm $(BOX2_PROG).asm $(BOX3_PROG).asm $(BOX4_PROG).asm

docs :
	@doxygen
