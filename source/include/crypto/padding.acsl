/**
 * SBB Crypto ACSL specification
 * @refine Padding.cry
 */

#ifndef __PADDING_API_ACSL__
#define __PADDING_API_ACSL__

#include "crypto.acsl"

/*@ axiomatic padding {
  @  
  @ axiom pad_is_unique : \forall model_byte a, b; a == pad && b == pad ==> a == b;
  @
  @ // padWith - recursive definition 
  @ logic model_data padWith_rec(integer mod, integer n, model_data l) = 
  @       (mod * \ceil(n / mod)  == n && mod >= 1) ? l: padWith_rec(mod, n+1, \Cons(pad, l));
  @
  @ logic model_data rightPadWith(integer mod, integer n, model_data l) = 
  @       (mod * \ceil(n / mod)  == n && mod >= 1) ? l: \repeat( [| pad |], mod * \ceil(n / mod) -n) ^ l;
  @
  @ logic model_data padWith(integer mod, integer n, model_data l) = 
  @       (mod * \ceil(n / mod)  == n && mod >= 1) ? l:  l ^ \repeat( [| pad |], mod * \ceil(n / mod) -n);
  @
  @ predicate has_equal_neighbors(model_data l, integer lower_bound, integer upper_bound) =
  @    \forall integer i; lower_bound <= i < upper_bound - 1 && \nth(l, i) == \nth(l, i + 1);
  @
  @ predicate list_is_not_padded(integer mod, integer n, model_data l) = 
  @    mod >= 1 &&       
  @    \length(l) == n &&  mod * \ceil(n / mod)  == n &&
  @    \forall integer i; 0 <= i < n && \nth(l, i) == mod_byte;
  @
  @ predicate list_is_padded(integer mod, integer n, model_data l) = 
  @    mod >= 1 &&
  @    ( 
  @    	 list_is_not_padded(mod, n, l) || // according to definition - see Padding.cry
  @      (
  @        \length(l) ==  mod * \ceil(n / mod) &&  mod * \ceil(n / mod) > n &&
  @        \forall integer i; 0 <= i < n && \nth(l, i) == mod_byte &&
  @        \forall integer j; n <= j < \length(l) - n && \nth(l, j) == pad && 
  @        has_equal_neighbors(l, n, \length(l) - n)
  @      )
  @    );
  @
  @ predicate list_is_rigth_padded(integer mod, integer n, model_data l) = 
  @    mod >= 1 && 
  @    ( 
  @      list_is_not_padded(mod, n, l) || // according to definition - see Padding.cry
  @      (
  @        \length(l) ==  mod * \ceil (n / mod) &&  mod * \ceil(n / mod) > n &&
  @        \forall integer j; 0 <= j < \length(l) - n && \nth(l, j) == pad &&
  @        \forall integer i; \length(l) - n <= i < \length(l) && \nth(l, i) == mod_byte &&
  @        has_equal_neighbors(l, 0, \length(l) - n)
  @      )
  @    );
  @}
  @
  @ // true - discharged by alt-ergo
  @ lemma test_no_padded_list: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @     list_is_not_padded (2, 4, l);
  @
  @ // true - discharged by alt-ergo
  @ lemma test_weak_padded_list: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @     list_is_not_padded (2, 4, l) <==> list_is_padded(2, 4, l);
  @
  @ // true - discharged by alt-ergo
  @ lemma test_weak_right_padded_list: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @     list_is_not_padded (2, 4, l) <==> list_is_rigth_padded(2, 4, l);
  @
  @ // true - discharged by alt-ergo
  @ lemma test_padded_list: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte, pad, pad |];
  @     list_is_padded(3, 4, l);
  @
  @ // true - discharged by alt-ergo
  @ lemma test_right_padded_list: \let l = [| pad, pad, mod_byte, mod_byte, mod_byte, mod_byte |];
  @     list_is_rigth_padded(3, 4, l);
  @
  @ // true - discharged by alt-ergo
  @ lemma test_rightPadWith_function: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @     \let pw = rightPadWith(3,4,l); \nth(pw,0) == pad && \nth(pw,1) == pad;
  @
  @ // true - discharged by alt-ergo
  @ lemma test_rightPadWith_padded_list: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @     \let pw = rightPadWith(3,4,l); list_is_rigth_padded(3, 4, pw);
  @
  @ // true - discharged by alt-ergo
  @ lemma test_padWith_function: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @     \let pw = padWith(3,4,l); \nth(pw,4) == pad && \nth(pw,5) == pad;
  @
  @ // true - discharged by alt-ergo
  @ lemma test_padWith_padded_list: \let l = [| mod_byte, mod_byte, mod_byte, mod_byte |];
  @     \let pw = padWith(3,4,l); list_is_padded(3, 4, pw);
  @
  @ // true - discharged by alt-ergo
  @ lemma padding_equality: \forall integer mod, integer n, model_data l;
  @    list_is_not_padded(mod, n, l) ==>
  @      (list_is_rigth_padded(mod, n, l) <==> list_is_padded(mod, n, l));
  @     
  @*/
#endif