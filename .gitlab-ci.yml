#-----------------------------------------------------------------------------#
#
# General startup commands
#
#-----------------------------------------------------------------------------#
# In order to make this work, we need to provide gitlab-helper base image
# sudo  docker pull gitlab/gitlab-runner-helper:x86_64-081978aa 
# where x86_64-081978aa  is a suitable tag for your architecture (and date)
# then we have to re-tag the image:
# sudo docker tag gitlab/gitlab-runner-helper:x86_64-081978aa gitlab-runner-helper:11.2.0
image: galoisinc/besspin:voting_system


before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## and email.
    ##
    - git config --global user.email "gitlab-runner@galois.com"
    - git config --global user.name "Gitlab runner"
    - git submodule init
    - git submodule update

    ## Clean any remaining artifacts
    - make clean_all

#-----------------------------------------------------------------------------#
#
# Top level tests
#
#-----------------------------------------------------------------------------#
SbbFpga_LLVM:
  script:
    - export USE_CLANG=yes
    - export C_INCLUDE_PATH=$RISCV_C_INCLUDE_PATH
    - make fpga
  tags: ["voting-system"]

SbbSim_LLVM:
  script:
    - export USE_CLANG=yes
    - export C_INCLUDE_PATH=$RISCV_C_INCLUDE_PATH
    - make sim
  tags: ["voting-system"]


SbbFpga_GCC:
  script:
    - make fpga
  tags: ["voting-system"]

SbbSim_GCC:
  script:
    - make sim
  tags: ["voting-system"]

Bottom:
  script:
    - export TARGET=bottom
    - make bottom_all
  tags: ["voting-system"]

Typecheck:
  script:
    - export TARGET=verification
    - make typecheck_all
  tags: ["voting-system"]

Verify:
  script:
    - export TARGET=verification
    - make verify_all
  tags: ["voting-system"]

FreeRTOS:
  script:
    - export TARGET=freertos
    - make freertos_all
  tags: ["voting-system"]

HostTests:
  script:
    - export TARGET=hosttests
    - make hosttest_all
  tags: ["voting-system"]

Posix:
# Host tests shouldn't need tools from nix-shell 
  script:
    - export TARGET=posix
    - make posix_sbb
  tags: ["voting-system"]

Posix_Network_Logs:
# Host tests shouldn't need tools from nix-shell 
  script:
    - export NETWORK_LOGS=yes
    - export TARGET=posix
    - make posix_sbb
  tags: ["voting-system"]

Simulator:
  script:
    - export TARGET=sim
    - make sim_all
  tags: ["voting-system"]

