macOS as a Development Platform for the BESSPIN Voting System

Operating System Foundation
---------------------------

1. We support macOS 10.14 (Mojave) or 10.15 (Catalina) as a
   development platform.

Software Foundations
--------------------

2. Install Homebrew (https://brew.sh/) and install a variety of
   missing packages.
```
   brew install pkg-config gtksourceview libgnomecanvas libxml2 autoconf
```

    Set `PKG_CONFIG_PATH` to point to the right location.  E.g.,
```
    setenv PKG_CONFIG_PATH `echo /usr/local/opt/*/lib/pkgconfig | sed -e 's/ /:/g'
```
    or
    export PKG_CONFIG_PATH=`echo /usr/local/opt/*/lib/pkgconfig | sed -e 's/ /:/g'
```
   `pkg-config` does not know, by default, where to find all these
   `opt`-based packages; this environment variable fixes this. Use
   the appropriate command based upon your shell.

OPAM
----

3. Install and initialize `opam`, a some of the system's dependencies
   are installed via `opam`.

```
   brew install opam
   opam init  (respond 'y' and 'y' to two questions)
```

Frama-C
-------

4. Install Frama-C using `opam`
```
  opam install frama-c --unlock-base
```
   OPAM's OCaml is newer than Frama-C needs/uses.  The use of the
   `--unlock-base` switch permits OPAM to install an older,
   appropriate version of OCaml.

5. Check what version of Frama-C is installed and working.

  We have used Frama-C version 18.0 (Argon) and 19.0 (Potassium) for
  the development of BVS 2019.

  `frama-c --version`

LLVM (including clang)
----------------------

6. We install llvm/clang using Homebrew, since it includes `llvm-link`
   which is needed for SAW.  Doing so overrides Apple's default
   install of clang.

   6.1  Install Homebrew LLVM via Homebrew: `brew install llvm`

   6.2  Add `/usr/local/opt/llvm/bin` to the front of your shell's `PATH`.

        This is important so that Hombre's LLVM and tools are found before
        Apple's installation, which is in `/usr/local/bin`.

   6.3  Install the standard C headers.

       open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg
       Follow the installation instructions

Clang-Format
------------

Install Clang-Format.

7. `brew install clang-format`

SHAVE Smoketest
---------------

This set of tools should be enough to reproduce the Frama-C analyses
of the SSITH seedling SHAVE application software (if you have access
to that repository).

COQ
---

Even if you are not using Coq for formal proofs, it is needed to build
the *BESSPIN Book*.

9. `opam install coq`
   `opam install coqide`

Doing so will sometimes recompile Frama-C.

Cryptol
-------

As of November 2019, one can install the latest release of Cryptol and
its default SMT solver, Z3 from Microsoft, by using Homebrew: `brew
install cryptol`.  The resulting installation has Cryptol 2.8.0 and Z3
version 4.8.6.

If one needs an older version of Cryptol, see the [Cryptol releases
page at GitHub](https://github.com/GaloisInc/cryptol/releases/).

Z3
--

If the aforementioned Homebrew install of Cryptol properly installed
Z3 as a dependency, then no further action is necessary.  If you have
any problem, see the following.

A recent version of Z3 is a pre-requisite for Cryptol and other tools
we use.  Sometimes particular release break functionality.  Our
currently suggested known good version of Z3 is version 4.7.1 or
4.8.6.  The 4.8 series of Z3 releases introduced some performance
regressions.

In order to install specific releases of Z3, directly download them
from `https://github.com/Z3Prover/z3/releases` and extract the Zip
archive and move the extracted directory to somewhere in your `PATH`.

Yices
-----

Another solver that Cryptol can use is the Yices SMT solver from SRI.

Release 2.6.1 is required, but is available on Homebrew, so:

 `brew install SRI-CSL/sri-csl/yices2`

SAW
---

Much of the work on the BVS and its dependencies used SAW version 0.3
and development versions before SAW 0.4 was released.

One can obtain SAW releases from the [SAW release webpage at
GitHub](https://github.com/GaloisInc/saw-script/releases).

Git Submodules
--------------

Make sure to update all submodules of this project.  At this time, the
only submodule is our version of FreeRTOS.

```
git submodule update --init
```

Nix
---

We use [Nix](http://nixos.org/) to manage some of our underlying
technology.

```
curl https://nixos.org/nix/install | sh
. $HOME/.nix-profile/etc/profile.d/nix.sh
```

GFE and BESSPIN Tooling
-----------------------

The Government Furnished Equipment (GFE) on which the Voting System
runs to demonstrate SSITH secure CPUs is a Xilinx FPGA platform (a VCU
118 with a variety of attached peripherals).  The supported platform
our the development environment for the GFE, as well as the custom EDA
tooling we have built for DARPA, is Linux.  As such, at this time we
do not suggest one should try to use any of that tooling on macOS.
Perhaps in the future we will support some of that tooling on macOS,
and at the moment we experimentally use some of it via `docker` on
macOS.
